---
export interface Props {
  client: string
  slot: string
  format?: string
  responsive?: boolean
  className?: string
}

const { 
  client, 
  slot, 
  format = 'auto',
  responsive = true,
  className = ''
} = Astro.props

// Generate unique ID for this ad slot
const adId = `ad-${slot}-${Math.random().toString(36).substr(2, 9)}`
---

{client && (
  <div class={`ad-container ${className}`}>
    <!-- AdSense Ad -->
    <ins class="adsbygoogle"
         id={adId}
         style="display:block"
         data-ad-client={client}
         data-ad-slot={slot}
         data-ad-format={format}
         data-full-width-responsive={responsive ? "true" : "false"}>
    </ins>
    
    <!-- Fallback content if ads are blocked -->
    <div class="ad-fallback hidden">
      <div class="bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
        <p class="text-gray-500 text-sm">Advertisement</p>
      </div>
    </div>
  </div>
  
  <script define:vars={{ adId, client, slot }}>
    // Initialize AdSense ad
    (function() {
      try {
        // Check if AdSense is loaded
        if (typeof window.adsbygoogle !== 'undefined') {
          window.adsbygoogle.push({});
        } else {
          // AdSense not loaded, show fallback
          setTimeout(() => {
            const adElement = document.getElementById(adId);
            const fallback = adElement?.parentElement?.querySelector('.ad-fallback');
            
            if (adElement && fallback && adElement.innerHTML.trim() === '') {
              adElement.style.display = 'none';
              fallback.classList.remove('hidden');
            }
          }, 3000);
        }
      } catch (error) {
        console.log('AdSense initialization error:', error);
        
        // Show fallback on error
        const adElement = document.getElementById(adId);
        const fallback = adElement?.parentElement?.querySelector('.ad-fallback');
        
        if (adElement && fallback) {
          adElement.style.display = 'none';
          fallback.classList.remove('hidden');
        }
      }
    })();
  </script>
)}

<style>
  .ad-container {
    margin: 2rem 0;
    text-align: center;
  }
  
  .ad-container.inline {
    margin: 1rem 0;
  }
  
  .ad-container.sticky-bottom {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    z-index: 100;
    margin: 0;
    padding: 0.5rem;
    background: white;
    box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
  }
  
  @media (max-width: 768px) {
    .ad-container {
      margin: 1.5rem 0;
    }
    
    .ad-container.mobile-hidden {
      display: none;
    }
  }
  
  /* Responsive ad sizes */
  .adsbygoogle {
    min-width: 250px;
    min-height: 250px;
  }
  
  @media (max-width: 480px) {
    .adsbygoogle {
      min-width: 320px;
      min-height: 100px;
    }
  }
  
  @media (min-width: 768px) {
    .adsbygoogle {
      min-width: 728px;
      min-height: 90px;
    }
  }
  
  @media (min-width: 1024px) {
    .adsbygoogle {
      min-width: 970px;
      min-height: 250px;
    }
  }
  
  /* Ad container animations */
  .ad-container {
    opacity: 0;
    animation: fadeInAd 1s ease-in-out 0.5s forwards;
  }
  
  @keyframes fadeInAd {
    to {
      opacity: 1;
    }
  }
  
  /* Fallback styling */
  .ad-fallback {
    min-height: 250px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .ad-fallback > div {
    transition: all 0.3s ease;
  }
  
  .ad-fallback:hover > div {
    border-color: #9ca3af;
    background-color: #f9fafb;
  }
</style>